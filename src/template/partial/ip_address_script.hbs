(function(window, document) {
  'use strict';

  // Host IP state
  var hostErrors = "<%= host_errors %>";
  if (hostErrors && hostErrors.length > 0) {
    var errors = hostErrors.substring(1, hostErrors.length - 1).split(',');
    for (var i = 0; i < errors.length; i++) {
      console.warn(errors[i]);
    }
  }
  console.log("<%= host_success %>");
  var currentIp = "<%= ip %>";
  var hasValidIp = <%= ipExists %>;
  var isSecureProtocol = <%= isSecure %>;
  var hostname = "<%= hostname %>";
  var ipAddressField = document.getElementById('ip-address-field');
  var validIpRegex = /^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$/gi;

  // IP Overlay
  var isOverlayShown = false;
  var isIpAddressOverlayShown = false;

  // Element References
  var ipOverlay = document.getElementById('ip-overlay');
  var ipAddressOverlay = document.getElementById('ip-address-overlay');
  var ipOverlayButton = document.getElementById('ip-overlay-button');
  var ipOverlayIpIncorrectButton = document.getElementById('ip-overlay-ip-incorrect-button');
  var githubLink = document.getElementById('header-github-link');
  var ipAddressInput = document.getElementById('ip-address-input-field');
  var ipAddressCloseButton = document.getElementById('ip-overlay-close');
  var ipAddressInputSubmit = document.getElementById('ip-address-input-submit');
  var ipAddressErrorField = document.getElementById('ip-input-error-field');
  var ipSuggestionsTable = document.getElementById('ip-suggestions-table');

  // Listeners to Change in IP
  var ipChangeListeners = [];
  var registerIpChangeListener = function(func, immediatelyInvoke) {
    if(immediatelyInvoke) {
      func.call(null, currentIp);
    }
    ipChangeListeners.push(func);
  };
  var unregisterIpChangeListener = function(func) {
    var i = ipChangeListeners.length;
    while(--i > -1) {
      if(ipChangeListeners[i] === func) {
        ipChangeListeners.splice(i, 1);
        break;
      }
    }
  };
  var notifyIpChangeListeners = function(newValue) {
    var i = ipChangeListeners.length;
    while(--i > -1) {
      ipChangeListeners[i].call(null, newValue);
    }
  };
  window.r5pro_registerIpChangeListener = registerIpChangeListener;
  window.r5pro_unregisterIpChangeListener = unregisterIpChangeListener;

  var normalizeIp = function(value) {
    var isValid = value !== null;
    isValid = isValid && value !== undefined;
    isValid = isValid && value !== "null";
    isValid = isValid && value !== "undefined";
    return isValid ? value : window.location.hostname;
  };
  var fillInIpSuggestions = function(currentIp) {
    var items = [];
    var localIp = normalizeIp("<%= localIp %>");
    var addIpToList = function(value) {
      if(value !== null && currentIp !== value) {
      items.push('<tr>' +
          '<td>' +
            '<a class="red-text ip-suggestion-link header-link" href="#">' +
              value +
            '</a>' +
          '</td>' +
        '</tr>');
      }
    };
    addIpToList(localIp);
    if (localIp !== hostname) {
      addIpToList(hostname);
    }
    if(items.length > 0) {
      ipSuggestionsTable.innerHTML = items.join('');
    }
  }
  var updateAndStoreUserEnteredIpAddress = function(value) {
    var expiry = 60*60*24;
    if(ipAddressField.hasOwnProperty('innerText')) {
      ipAddressField.innerText = value;
    }
    else {
      ipAddressField.textContent = value;
    }
    document.cookie = '<%= cookieName %>=' + value + '; path=/; max-age=' + expiry;
    currentIp = value;
    notifyIpChangeListeners(value);
    // update URL + query params
    var params = '<%= kvUrlParams %>'.split(';');
    var i = params.length;
    while (--i > -1) {
      var kv = params[i].split('=');
      if (kv[0] === 'host') {
        params[i] = 'host=' + value;
      }
      else if (kv[0] === '') {
        params.splice(i, 1);
      }
    }
    var query = params.length > 1 ? params.join('&') : params[0]
    window.location = [(window.location.origin + window.location.pathname), query].join('?');
  };

  var toggleOverlay = function(event) {
    event.preventDefault();
    event.stopPropagation();
    if(!isOverlayShown) {
      showOverlay();
    }
    else {
      hideOverlay();
    }
  };
  var showOverlay = function() {
    isOverlayShown = true;
    if(isIpAddressOverlayShown) {
       hideIpAddressOverlay();
    }
    ipOverlay.classList.remove('hidden');
  };
  var hideOverlay = function() {
    isOverlayShown = false;
    ipOverlay.classList.add('hidden');
  };
  var handleOverlayClose = function(event) {
    if(event.target !== githubLink &&
        event.target !== ipOverlayIpIncorrectButton) {
      event.stopPropagation();
      event.preventDefault();
      hideOverlay();
      return false;
    }
    else if(event.target === ipOverlayIpIncorrectButton) {
      toggleIpAddressOverlay(event);
    }
    return true;
  };

  var toggleIpAddressOverlay = function(event) {
    event.stopPropagation();
    event.preventDefault();
    if(!isIpAddressOverlayShown) {
      showIpAddressOverlay();
    }
    else {
      hideIpAddressOverlay();
    }
    return false;
  };
  var showIpAddressOverlay = function() {
    isIpAddressOverlayShown = true;
    if(isOverlayShown) {
      hideOverlay();
    }
    ipAddressOverlay.classList.remove('hidden');
  };
  var hideIpAddressOverlay = function() {
    isIpAddressOverlayShown = false;
    ipAddressOverlay.classList.add('hidden');
    ipAddressErrorField.classList.add('hidden');
  };
  var handleIpAddressOverlayClose = function(event) {
    if(event.target !== ipAddressInput &&
        event.target !== ipAddressInputSubmit &&
        !event.target.classList.contains('ip-suggestion-link')) {
        event.preventDefault();
        event.stopPropagation();
        hideIpAddressOverlay();
        return false;
    }
    else if(event.target.classList.contains('ip-suggestion-link')) {
      var value;
      event.preventDefault();
      event.stopPropagation();
      hideIpAddressOverlay();
      if(event.target.hasOwnProperty('innerText')) {
        value = encodeURIComponent(event.target.innerText);
      } else {
        value = encodeURIComponent(event.target.textContent);
      }
      updateAndStoreUserEnteredIpAddress(value);
      return false;
    }
    return true;
  };
  var handleIpAddressInputSubmit = function(event) {
    var value = encodeURIComponent(ipAddressInput.value);
    event.stopPropagation();
    event.preventDefault();
    ipAddressErrorField.classList.add('hidden');
    // Removing Regex check for now.
//      if(validIpRegex.test(value)) {
      updateAndStoreUserEnteredIpAddress(value);
      hideIpAddressOverlay();
//      }
//      else {
//        ipAddressErrorField.classList.remove('hidden');
//      }
    return false;
  };
  ipOverlayButton.addEventListener('click', toggleOverlay);
  ipOverlay.addEventListener('mousedown', handleOverlayClose);
  ipOverlay.addEventListener('touchstart', handleOverlayClose);
  ipAddressCloseButton.addEventListener('click', handleOverlayClose);

  ipAddressInput.addEventListener('keyup', function(event) {
    if(event.keyCode === 13) {
      handleIpAddressInputSubmit(event);
    }
  });
  ipAddressInputSubmit.addEventListener('click', handleIpAddressInputSubmit);
  ipAddressOverlay.addEventListener('mousedown', handleIpAddressOverlayClose);
  ipAddressOverlay.addEventListener('touchstart', handleIpAddressOverlayClose);

  registerIpChangeListener(fillInIpSuggestions, true);

}(this, document));

